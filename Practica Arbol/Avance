#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

void principal();

int main(void)
{
    principal();
    return 0;
}

void principal()
{
    int levels;
    pid_t pid;
    printf("\nEnter levels:\n");
    scanf("%d",&levels);

    for (int i=0; i<2; i++)
    {
        if(i==0)
        {
            pid=fork();
            if(pid<0)
            {
                fprintf(stderr,"Error\n");
                exit(-1);
            }if(pid==0)
            {
                printf("\nHijo ID: %d, Padre ID: %d\n", getpid(),getppid());
                if(i==0)//rama left
                {
                    for(int j=0; j<2; j++)
                    {
                        pid=fork();
                        if(pid!=0)
                        {
                        printf("\nPadre ID: %d, Hijo ID: %d\n", getpid(),pid);
                        break;
                        }
                    }

                }
            }
        
        else if(i==1)
            {
                for(int j=0; j<3; j++)
                {
                    pid=fork();
                  if(pid!=0)
                  {
                      printf("\nPadre ID: %d, Hijo ID: %d\n", getpid(),pid);
                      break;
                  }

                }
            }
        }
            /*
        pid=fork();
        if(pid<0)
        {
            fprintf(stderr,"Error\n");
            exit(-1);
        }if(pid==0)
        {
            printf("\nHijo ID: %d, Padre ID: %d\n", getpid(),getppid());
            if(i==0)//rama left
            {
                for(int j=0; j<2; j++)
                {
                    pid=fork();
                  if(pid!=0)
                  {
                      printf("\nPadre ID: %d, Hijo ID: %d\n", getpid(),pid);
                      break;
                  }

                }
            }if(i==1)
            {
                for(int j=0; j<3; j++)
                {
                    pid=fork();
                  if(pid!=0)
                  {
                      printf("\nPadre ID: %d, Hijo ID: %d\n", getpid(),pid);
                      break;
                  }

                }
            }
            
        }
            
    }*/
    }
    for(int k=1;k<2*levels; k++)
     {
         wait(NULL);
     }
}    
